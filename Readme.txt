All the code is written for Python2.7, with the following packages (versions): pandas 0.23.4, numpy 1.11.3, matplotlib 1.5.1, seaborn 0.7.1, Bio 1.66, RNA 2.4.11, scipy 0.19, sklearn 0.18.1, shap 0.28.5, .

CONTENTS OF THE "CODE" FOLDER:

Files:
DESIGN_frameshifting_library - Code used for the generation of the oligonucleotide library. It starts from a set of previously reported PRF sites (./design/fs.csv) and introduces systematic sequence manipulations (in a subset: ./design/fsmain.csv). 
mapfsbins_splicinganddels.py - Maps the reads to library variants and bins (based on variant and bin barcodes)
	The raw data (which can be obtained from GEO, accession GSE145684) should be split into portions (e.g. of 100,000 reads)
	and mapping should be parallelized.
	The sequencing data is paired end, and the splits from the two mates should be named 'Split1-' and a counter 
	and 'Split2-' and a counter, respectively.
	This file can be run from the code folder with
	python2.7 mapfsbins_splicinganddels.py [filenumber/counter] [experiment: minus1, plus1, stopvector or RNA]
	The files generated serve as input for the mapping of the read to the variant sequence (to identify indels, mismatches, splicing events): folder "mapping"
ANALYSIS_all_combined.py - This file creates dataframes and overview plots by combining the data from the different readouts (folder "mapping").
ANALYSIS_designed - Contains most analysis of the designed library (by library subset, i.e. "slippery", "upstream", "downstream" etc) and produces most figures.
ANALYSIS_by_context - Contains analyses across library subsets, by PRF event used as starting point for the sequence manipulations.
ANALYSIS_hiv - Contains analyses of the HIV clinical variants.
ML_prepare - split train and test data (contains randomized dropping of variants with identical sequence). 
ML_MakeFeatures - Code used to generate feature sets for predictions
ML_BuildAndTestModels - Code used for optimizing and training computational models predicting PRF potential (signal over threshold) or PRF efficiency (% GFP fluorescence)
	based on different sets of features.
RUN_PREDICTOR - Runs the predictor on a user-provided csv file with aligned sequences (see below for detailed instructions).

Folders:
functions - collection of functions used, needs to be added to the PYTHONPATH
design - contains input files for the design of the library and the output of the python file (including the final designed library)
mapping - contains subfolders for minus1 (-1PRF), plus1 (+1PRF), stopvector and RNA mapping. 
	The outputs are files containing the normalized coverage across bins (starting with "fsm1_", "fsp1_", "fsstop_") and the processed readouts (starting with "expr").
	In the case of the targeted RNAseq mapping, the python file generates a collection of RNA variants (including splice variants and variants with indels as separate entries)
	and counts for each library variant (total, potentially spliced).
forpredictor - contains the saved models and related information necessary to run the predictor (RUN_PREDICTOR.py).
dataframes - contains the processed data used for the analysis and the predictions, e.g.:
	fsdf.csv - full library with all readouts and information for the intended sequences;
	fsvarsdf.csv - full library with all readouts and information for the intended sequences and those that were generated by errors in synthesis or cloning (indels, substitutions, etc).
ml - contains the optimized hyperparameters and the features computed for the library variants	
figures - all the plots are saved here
tables - tables are saved here, e.g. for Supplementary Data

DATA AVAILABILITY:
All the raw data (sequencing reads) are available in the NCBI GEO (accession GSE145684)

GENERAL INSTRUCTIONS:
The "/code/functions" folder needs to be added to the PYTHONPATH
All code has to be run from the "code" folder
The raw data should be placed in the respective folders in "rawdata", i.e. "minus1", "plus1", "RNA", "stopvector".
Not all the intermediate dataframes have been provided in order to not unnecessarily inflate the size of this repository, but it should be possible to generate everything from the data provided or available in public repositories.

SPECIFIC INSTRUCTIONS FOR TESTING THE PREDICTOR:
A python script is provided to test the predictor with custom input sequences. The code can be run from anywhere, provided the folder "forpredictor" is in the same location.
The input needs to be a csv file with two columns:
column 1: any identifier
column 2: DNA sequence containing a potential -1 frameshifting site (for optimal performance a variant of a known -1 PRF site). The sequence has to be of length 210 and in the original frame (i.e. starting in frame 0). 
	The slippery site (typically of the type XXXYYYZ, but any sequence at that position will be tolerated) has to be located at positions 66-72 (1-based), i.e. the first 65 nt will be
	interpreted as upstream region, the following 7 as the slippery sequence, and the remaining 120 as the downstream region. For example in the case of HIV the first 72 nt end with TTTTTTA.

Example input files are given in the "forpredictor" folder:
	"./forpredictor/testinput" - contains 100 random sequences of 162 nt and four variants of the HIV-1 site
	"./forpredictor/testset_forpredictor" - contains sequences from the test set not used to build the models (variants of different PRF events included in our library design together);
		the measured % GFP fluorescence and the ability to yield a -1 PRF signal (0/1) are included in the file ("testset_measured"). 
		
Obligatory input: 
	- path to the csv file containing the aligned (DNA) sequences
Optional:
	- output file name (default: predictions[.csv]) - this becomes an obligatory input if a feature set is specified (below)
    - name of feature set to be used for the prediction (optional)
        all (default)
        aa: only amino acid class around the slippery site
        dg: only minimum free energy of regions downstream of the frameshifting site
        sec: only information of predicted pairedness of downstream positions
        slip: only slippery site position identity
        tai: only tAI of regions around the slippery site
        

Example code (to be run from the "code" folder. The code can be run from anywhere, provided the folder "forpredictor" is in the same location (and the required packages/versions are installed).
python2.7 RUN_PREDICTOR.py ./forpredictor/testinput 
python2.7 RUN_PREDICTOR.py ./forpredictor/testset_forpredictor testset_all_features
python2.7 RUN_PREDICTOR.py ./forpredictor/testset_forpredictor only_based_on_downstream_MFE dg
python2.7 RUN_PREDICTOR.py ./forpredictor/testset_forpredictor only_based_on_downstream_slippery_site slip


COMMENTS:
The code (RUN_PREDICTOR.py) generates more features than are actually used, so the user can modify the code and try different configurations or predictions based on different regions.